(* Umbral1013, 2025/02/10 *)
MODULE NumericalMethods;

IMPORT Out, Math;

PROCEDURE Bisection*;
CONST
	PAD = 2;
	ZEROPAD = 4;
	ERROR = 0.001;
VAR
	(* fc is meant to be read as 'f of c'. *)
	a, b, c, fc, oldC, percentageError: REAL;
	i: INTEGER;
BEGIN
	a := -2.0;	b := 3.0;	c := 0.0;
	fc := 0.0;	oldC := 0.0;	percentageError := 0.0;

	i := 0;
	REPEAT
		(* We show results. *)
		Out.String("Iteration: "); Out.Int(i, PAD); Out.Ln;
		Out.String("a: "); Out.Real(a, ZEROPAD); Out.Ln;
		Out.String("b: "); Out.Real(b, ZEROPAD); Out.Ln;
		Out.String("c: "); Out.Real(c, ZEROPAD); Out.Ln;
		Out.String("f(c): "); Out.Real(fc, ZEROPAD); Out.Ln;
		Out.String("Percentage error: ");
		Out.Real(percentageError, ZEROPAD); Out.String("%"); Out.Ln;

		(* This was quite a long function, so I had to break it up. *)
		fc := -26.0 + 82.3*c - 88.0*Math.power(c, 2.0);
		fc := fc + 45.4*Math.power(c, 3.0) - 9.0*Math.power(c, 4.0);
		fc := fc + 0.65*Math.power(c, 5.0);

		(* If f(c) is zero, it means we have found the root. *)
		IF fc > 0.0 THEN b := c
		ELSIF fc < 0.0 THEN a := c END;

		oldC := c;
		c := (a + b) / 2.0;
		percentageError := ABS( (c - oldC) / c) * 100.0;

		INC(i);
	UNTIL (percentageError < ERROR) OR (fc = 0.0);
END Bisection;

BEGIN
	Bisection;
END NumericalMethods.
