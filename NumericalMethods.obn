(* Umbral1013, 2025/02/10 *)
MODULE NumericalMethods;

IMPORT Out, Math;

PROCEDURE Function(x: REAL): REAL;
BEGIN
	RETURN -23.33 + 79.35*x -88.09*Math.power(x, 2.0)
		+ 41.6*Math.power(x, 3.0) -8.68*Math.power(x, 4.0)
		+ 0.658*Math.power(x, 5.0)
END Function;

PROCEDURE Bisection*;
CONST
	PAD = 2; ZEROPAD = 4;
	DESIRED_ERROR = 1.0;
VAR
	(* fc is meant to be read as 'f of c'. *)
	a, b, c, fc, oldC, aproximationError: REAL;
	i: INTEGER;
BEGIN
	a := 4.5; b := 5.0; c := (a + b) / 2.0;
	fc := Function(c); aproximationError := 100.0;

	i := 0;
	WHILE ( (aproximationError >= DESIRED_ERROR) & (fc # 0.0) ) DO
		(* We show results. *)
		Out.String("Iteration: "); Out.Int(i, PAD); Out.Ln;
		Out.String("a: "); Out.Real(a, ZEROPAD); Out.Ln;
		Out.String("b: "); Out.Real(b, ZEROPAD); Out.Ln;
		Out.String("c: "); Out.Real(c, ZEROPAD); Out.Ln;
		Out.String("f(c): "); Out.Real(fc, ZEROPAD); Out.Ln;
		Out.String("Aproximation error: ");
		Out.Real(aproximationError, ZEROPAD); Out.String("%"); Out.Ln;

		fc := Function(c);

		(* If f(c) is zero, it means we have found the root. *)
		IF fc > 0.0 THEN b := c
		ELSIF fc < 0.0 THEN a := c END;

		oldC := c;
		c := (a + b) / 2.0;
		aproximationError := ABS( (c - oldC) / c) * 100.0;

		INC(i);
	END;
END Bisection;

BEGIN Bisection
END NumericalMethods.
