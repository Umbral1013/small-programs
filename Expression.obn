(* Umbral1013, 2025/02/21 *)
MODULE Expression;

IMPORT Queue, Stack;

TYPE Expression* = POINTER TO ExpressionDesc;
	ExpressionDesc = RECORD
		(* Private *)
		InfixData: Queue.Queue;
		PostfixData: Queue.Queue;
		IsOperator: PROCEDURE (ch: CHAR): BOOLEAN;
		Precedence: PROCEDURE (ch: CHAR): INTEGER;
		ProcessToken: PROCEDURE (e: Expression; ch: CHAR; s: Stack.Stack);
		(* Public *)
		SetExpression*: PROCEDURE (e: Expression; q: Queue.Queue);
		GetPostfixExpression*: PROCEDURE(e: Expression): Queue.Queue;
		ToPostfix*: PROCEDURE (e: Expression)
	END;

PROCEDURE IsOperator(ch: CHAR): BOOLEAN;
BEGIN
	RETURN (ch = "+") OR (ch = "-") OR (ch = "*")
		OR (ch = "/") OR (ch = "^")
END IsOperator;

(* The higher the number, the more precedence it has *)
PROCEDURE Precedence(ch: CHAR): INTEGER;
VAR result: INTEGER;
BEGIN
	IF (ch = "+") OR (ch = "-") THEN result := 1
	ELSIF (ch = "*") OR (ch = "/") THEN result := 2
	ELSIF ch = "^" THEN result := 3
	ELSE result := 0 END;
RETURN result END Precedence;

PROCEDURE ProcessToken(e: Expression; ch: CHAR; s: Stack.Stack);
VAR
	charElemS: Stack.CharElement;
	charElemQ: Queue.CharElement;
	topStack, popped: Stack.Element;
BEGIN
	NEW(charElemS); charElemS.ch := ch;

	(* We want to check if the queue is not empty before assigning
	something to topStack. *)
	NEW(topStack);
	IF ~s.IsEmpty(s) THEN topStack := s.GetTop(s)
	ELSE topStack := charElemS END;

	IF ch = "(" THEN
		s.Push(s, charElemS)
	ELSIF ch = ")" THEN
		WHILE ( ~s.IsEmpty(s) )
				& ( topStack(Stack.CharElement).ch # "(" ) DO
			NEW(popped); popped := s.Pop(s);
			NEW(charElemQ); charElemQ.ch := popped(Stack.CharElement).ch;
			e.PostfixData.Enqueue( e.PostfixData,  charElemQ );
			topStack := s.GetTop(s)
		END;

		(* Popping the opening parenthesis *)
		ASSERT( ~s.IsEmpty(s) );
		popped := s.Pop(s);
	ELSIF IsOperator(ch) THEN
		WHILE ( ~s.IsEmpty(s) )
				& ( Precedence(topStack(Stack.CharElement).ch )  >= Precedence(ch) )
				& ( topStack(Stack.CharElement).ch # "(" ) DO
			NEW(popped); popped := s.Pop(s);
			NEW(charElemQ); charElemQ.ch := popped(Stack.CharElement).ch;
			e.PostfixData.Enqueue( e.PostfixData, charElemQ );
			topStack := s.GetTop(s)
		END;
		s.Push(s, charElemS)
	ELSE
		NEW(charElemQ); charElemQ.ch := ch;
		e.PostfixData.Enqueue( e.PostfixData, charElemQ );
	END
END ProcessToken;

PROCEDURE SetExpression(e: Expression; q: Queue.Queue);
BEGIN e.InfixData := q;
END SetExpression;

PROCEDURE GetPostfixExpression(e: Expression): Queue.Queue;
BEGIN RETURN e.PostfixData END GetPostfixExpression;

PROCEDURE ToPostfix(e: Expression);
VAR charStack: Stack.Stack;
	token: Stack.CharElement;
	pfChar: Queue.CharElement; (* Postfix char *)
	dequeued: Queue.Element;
	popped: Stack.Element;
BEGIN NEW(charStack); Stack.Init(charStack);
	WHILE ~e.InfixData.IsEmpty( e.InfixData ) DO
		NEW(token); NEW(dequeued);
		dequeued := e.InfixData.Dequeue( e.InfixData);
		token.ch := dequeued(Queue.CharElement).ch;
		e.ProcessToken(e, token.ch, charStack);
	END;

	WHILE ~charStack.IsEmpty(charStack) DO
		NEW(pfChar); NEW(popped);
		popped := charStack.Pop(charStack);
		pfChar.ch := popped(Stack.CharElement).ch;
		e.PostfixData.Enqueue( e.PostfixData, pfChar)
	END
END ToPostfix;

PROCEDURE Init*(e: Expression);
BEGIN NEW(e.InfixData); Queue.Init(e.InfixData);
	NEW(e.PostfixData); Queue.Init(e.PostfixData);
	e.IsOperator := IsOperator;
	e.Precedence := Precedence;
	e.ProcessToken := ProcessToken;
	e.SetExpression := SetExpression;
	e.GetPostfixExpression := GetPostfixExpression;
	e.ToPostfix := ToPostfix
END Init;

END Expression.
